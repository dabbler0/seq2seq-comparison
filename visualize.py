import torch
from torch.utils.serialization import load_lua
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy
import argparse

parser = argparse.ArgumentParser(description='Visualize a comparison file generated by compare.lua')
parser.add_argument('input', help='Comparison file to visualize')
parser.add_argument('output', help='Output file')

args = parser.parse_args()

# Read in the comparison file
comparison_file = load_lua(args.input)

comparison_file.basis_change_backward

# Forward change-of-basis matrix
f, ((p1, p2), (p3, p4), (p5, p6)) = plt.subplots(3, 2)

p1.matshow(comparison_file.basis_change_forward.numpy())

p2.set_title('Forward MSE per component (sorted)')
indices = numpy.arange(500)
mses = numpy.ndarray.flatten(comparison_file.forward_mse.numpy())
indices = sorted(indices, key = lambda x: mses[x])
print('THE SORTED FORWARD INDICES:')
print('\n'.join(list(map(lambda i: '%d\t%f' % (i, mses[i]), indices))))
mses = sorted(mses)
p2.bar(numpy.arange(500), mses)

p3.matshow(comparison_file.basis_change_backward.numpy())

p4.set_title('Backward MSE per component (sorted)')
indices = numpy.arange(500)
mses = numpy.ndarray.flatten(comparison_file.backward_mse.numpy())
indices = sorted(indices, key = lambda x: mses[x])
print('THE SORTED BACKWARD INDICES:')
print('\n'.join(list(map(lambda i: '%d\t%f' % (i, mses[i]), indices))))
mses = sorted(mses)
p4.bar(numpy.arange(500), mses)

p5.matshow(comparison_file.correlation_AB.numpy())

p6.set_title('Canonical Correlations')
p6.plot(numpy.sort((numpy.sqrt(comparison_file.cca_magnitudes.numpy())), axis=None))

f.subplots_adjust(hspace=0.3)

plt.savefig(args.output, dpi=200)
